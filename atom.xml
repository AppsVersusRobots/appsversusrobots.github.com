<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AppsVersusRobots]]></title>
  <link href="http://AppsVersusRobots.github.io/atom.xml" rel="self"/>
  <link href="http://AppsVersusRobots.github.io/"/>
  <updated>2014-04-21T12:56:38-04:00</updated>
  <id>http://AppsVersusRobots.github.io/</id>
  <author>
    <name><![CDATA[Adam Weeks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Lesson in MVP: Gravity Pilot]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2014/04/21/a-lesson-in-mvp-gravity-pilot/"/>
    <updated>2014-04-21T12:24:18-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2014/04/21/a-lesson-in-mvp-gravity-pilot</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;For the things we have to learn before we can do them, we learn by doing them&rdquo;</p>

<p>-Aristotle</p></blockquote>

<p>Following this quote is usually how I find myself learning new technologies.
When Apple announced the <a href="https://developer.apple.com/library/ios/samplecode/DynamicsCatalog/Introduction/Intro.html">UIKit Dynamics</a> at WWDC 2013, I didn&rsquo;t really have a use for it in the apps that I was working on, but was very intrigued.</p>

<p>Fast forward to February, I&rsquo;m using the Starbucks app, watching the stars fall into a glass, when I decide to try to use UIKit Dynamics to emulate it for the water logger feature of Calorie Count. So I get to work learning UIKD.</p>

<p>With all the dynamics implemented, I have water bottles dropping into a giant cup, interacting with it and each other. It behaves very nicely and looks great. The next feature is to &ldquo;remove&rdquo; a water bottle from the glass. First, I just remove the last bottle added from the view, but since this is a learning experience, I decide that is too basic. Instead, I change the gravity affected on the last bottle to point upwards instead of downwards. This gives the bottle a nice floating away effect. During my testing, I find myself swapping the gravity on the bottle back and forth trying to keep the bottle hovering and bouncing up and down on the screen. Then it hit me, &ldquo;This would make a fun game!&rdquo;</p>

<p><img src="http://AppsVersusRobots.github.io/images/posts/gravity-pilot1.png"></p>

<p>So my goal with this game is to turn the gravity switching into a points system. You get points for touching the scoring areas at the top and bottom of the screen, without touching the edge of the screen which &ldquo;kills&rdquo; your player.</p>

<p>Quickly after starting development of this game in UIKit Dynamics, I realize, it isn&rsquo;t going to do what I want it to do. I take this opportunity to do another &ldquo;learning lesson&rdquo; and build the same game in <a href="https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013043-CH1-SW1">Sprite Kit</a>. In one night, I have a playable build that I send out to my friends. I also have a laundry list of features I want to implement within the game (Game Center, Leaderboards, Music, Graphics, etc.)! In walks <a href="http://twitter.com/mhmazur">Matt Mazur</a> with a simple idea, release it now.</p>

<p>&ldquo;But, I don&rsquo;t have any cool features.&rdquo; &ldquo;No one will like it without all the extra stuff.&rdquo; &ldquo;I&rsquo;ve gotta have X feature, otherwise it will fail&rdquo; -ME</p>

<p>&ldquo;Release it. Now.&rdquo; &ndash;<a href="http://twitter.com/mhmazur">Mazur</a></p>

<p>So I suck up my pride and release a 1.0, devoid of anything but basic gameplay. Definitely a &ldquo;MVP&rdquo; (Minimum Viable Product) app. You know what? People are actually liking it! I&rsquo;m getting feature requests that I wouldn&rsquo;t have thought of. I&rsquo;m NOT getting feature requests for items that I thought I would.</p>

<p>Version 1.1 is pending review from Apple with some of those features, but I&rsquo;ve got a nice core audience already hooked on the game that I wouldn&rsquo;t have had I not just &ldquo;released it&rdquo;.</p>

<p><a href="http://bit.ly/gravitypilot">Download Gravity Pilot on the App Store for free now!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Mavericks Monitors]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2013/10/31/multiple-mavericks-monitors/"/>
    <updated>2013-10-31T16:36:00-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2013/10/31/multiple-mavericks-monitors</id>
    <content type="html"><![CDATA[<p>When OSX Mavericks, was announced, I was excited about the multiple monitor support.
Now that it is <a href="http://www.apple.com/osx/">here</a>, I&rsquo;m even more! I&rsquo;ve long used two monitors for development and
the changes put into Mavericks fit right into my workflow.</p>

<h3>Monitors and Spaces</h3>

<p>Even before I used a Mac (there was a time), I utilized virtual desktops on both Linux and
Windows. I find that compartmentalizing my work environments helps me stay productive.
One space for social items (AIM, Twitter, IRC, Email), one for development,
and another for &ldquo;random&rdquo; i.e. web browsing and word/excel type things. Once I moved to
Mac, I quickly learned of <a href="http://mattgemmell.com/2011/07/27/using-spaces-on-os-x-lion/">Spaces</a> and adapted it into my workflow. I use the
keyboard shortcuts for direct space access, along with the track pad gestures (4-finger
swipe) to quickly switch between spaces.</p>

<p>My pre-Mavericks setup had all of my social items and web browser on space 1, XCode and
iPhone simulator on space 2, and BBEdit and iTerm on space 3. Everything was fine
and I kept focus until an IM or IRC message came in. Then I would switch to space 1 to reply
and lose track of what I was doing. Enter Mavericks. With Mavericks, I can designate my
second monitor as a completely separate space. While this doesn&rsquo;t sound like a big deal,
it is. Because the monitor is its own space, changing spaces on my primary monitor via
gesture leaves the other monitor&rsquo;s space alone. That means I can switch between XCode
and BBEdit spaces while never losing my communications apps on the secondary. It also means
that I don&rsquo;t notice a new article in <a href="http://feedly.com">feedly</a> while replying to an IM. I also really
like that the dock will move to whatever monitor you want it to, as well as the
menu bar being available on both.</p>

<h3>Current Setup</h3>

<p>While this is always an evolution, here is my current setup:</p>

<pre><code>*   Space 1 (Primary Monitor): Chrome, Skype, Mail.app, Outlook, Spotify
*   Space 2 (Primary Monitor): XCode, iOS Simulator, Sourcetree, Dash
*   Space 3 (Primary Monitor): BBEdit, iTerm, Sequel Pro
*   Space 4 (Secondary): Messages, Twitterific, Textual
</code></pre>

<h3>Help</h3>

<p>One minor thing that I can&rsquo;t seem to track down, but if you know please inform me: when
disconnecting the secondary monitor, I&rsquo;d like the &ldquo;space 4&rdquo; apps to stay in their own
space vs merging with &ldquo;space 1&rdquo;. If there is some way to do so, <a href="http://twitter.com/adamweeks">@adamweeks</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Playback Icons on iOS 7]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2013/09/24/custom-playback-icons-on-ios-7/"/>
    <updated>2013-09-24T10:20:00-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2013/09/24/custom-playback-icons-on-ios-7</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been having a HARD time getting remote control events for music apps to work properly on iOS 7.
It doesn&rsquo;t matter the app, Spotify, Downcast, even Music.app won&rsquo;t let me control the playback
via the media scrubber on the control center.</p>

<p>Let me correct myself, it works for approximately an hour after doing a full reboot on the device.
After that time, all playback controls seem to stop functioning. I finally decided to
submit a bug report to apple because of this (others have told me they are having the same
issue, but I wanted to formalize it). In the process of preparing a bug report with device
logs and screen shots, I discovered something interesting!</p>

<h2>The Discovery</h2>

<p><img src="http://AppsVersusRobots.github.io/images/posts/custom-playback.png"> <br/>
While this may look like your typical &ldquo;I&rsquo;m playing something&rdquo; lock screen, take a closer look.
Instead of a back button, there is a star. This is because I&rsquo;m playing via iTunes Radio.
This star allows you to basically &ldquo;favorite&rdquo; a song that is playing and tells iTunes to
play more like that song.</p>

<p>While I&rsquo;m no expert on MPMediaPlayback, I can&rsquo;t seem to recall having seen this ability before.
A quick dive into the most recent documentation makes no mention of the ability to customize it.
I also checked in the UIEvent Remote Control Event Types and there&rsquo;s nothing mentioned about
a custom function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">UIEventSubtypeNone</span>                              <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">UIEventSubtypeMotionShake</span>                       <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlPlay</span>                 <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlPause</span>                <span class="o">=</span> <span class="mi">101</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlStop</span>                 <span class="o">=</span> <span class="mi">102</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlTogglePlayPause</span>      <span class="o">=</span> <span class="mi">103</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlNextTrack</span>            <span class="o">=</span> <span class="mi">104</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlPreviousTrack</span>        <span class="o">=</span> <span class="mi">105</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlBeginSeekingBackward</span> <span class="o">=</span> <span class="mi">106</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlEndSeekingBackward</span>   <span class="o">=</span> <span class="mi">107</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlBeginSeekingForward</span>  <span class="o">=</span> <span class="mi">108</span><span class="p">,</span>
</span><span class='line'>   <span class="n">UIEventSubtypeRemoteControlEndSeekingForward</span>    <span class="o">=</span> <span class="mi">109</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span> <span class="n">UIEventSubtype</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Could this be an upcoming feature added to SDK 7.1? If anyone has any more info about it,
I&rsquo;d love to hear!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 Findings]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2013/09/20/ios-7-findings/"/>
    <updated>2013-09-20T10:34:00-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2013/09/20/ios-7-findings</id>
    <content type="html"><![CDATA[<h2>Diving into iOS 7</h2>

<p>While XCode 5 and iOS 7 beta have been out <a href="http://www.macrumors.com/2013/06/10/apple-releases-ios-7-beta-1-to-developers/">for a while</a>, I have been so busy
that I haven&rsquo;t had the chance of diving into it. That is, until this week. I&rsquo;ve
<a href="http://www.geekbinge.com/wp-content/uploads/2013/07/Andy-Dwyer-Dancing-Background.gif">LITERALLY</a> been compiling for iOS 7 SDK for 3 days, so if any of my findings are
incorrect, feel free to let me know!</p>

<h3>Pull To Refresh</h3>

<p>I&rsquo;ve been using <a href="https://github.com/enormego/EGOTableViewPullRefresh">EGOTableViewPullRefresh</a> probably WAY past its prime and now it is showing.
Here is the pre-iOS7 code that I was using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidScroll:</span><span class="p">(</span><span class="n">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span><span class="p">{</span>   
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">scrollView</span><span class="p">.</span><span class="n">isDragging</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">refreshHeaderView</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">EGOOPullRefreshPulling</span> <span class="o">&amp;&amp;</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mf">65.0f</span> <span class="o">&amp;&amp;</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mf">0.0f</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">_reloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">refreshHeaderView</span> <span class="nl">setState:</span><span class="n">EGOOPullRefreshNormal</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">refreshHeaderView</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">EGOOPullRefreshNormal</span> <span class="o">&amp;&amp;</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mf">65.0f</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">_reloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">refreshHeaderView</span> <span class="nl">setState:</span><span class="n">EGOOPullRefreshPulling</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scrollViewDidEndDragging:</span><span class="p">(</span><span class="n">UIScrollView</span> <span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span> <span class="nf">willDecelerate:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">decelerate</span><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="o">-</span> <span class="mf">65.0f</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">_reloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_reloading</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//[self reloadTableViewDataSource];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">reloadTableViewDataSource</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">refreshHeaderView</span> <span class="nl">setState:</span><span class="n">EGOOPullRefreshLoading</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">UIView</span> <span class="nl">beginAnimations:</span><span class="nb">nil</span> <span class="nl">context:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">UIView</span> <span class="nl">setAnimationDuration:</span><span class="mf">0.2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">contentInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mf">60.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">UIView</span> <span class="n">commitAnimations</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dataSourceDidFinishLoadingNewData</span><span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">_reloading</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">UIView</span> <span class="nl">beginAnimations:</span><span class="nb">nil</span> <span class="nl">context:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">UIView</span> <span class="nl">setAnimationDuration:</span><span class="mf">.3</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">setContentInset:</span><span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">UIView</span> <span class="n">commitAnimations</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">[</span><span class="n">refreshHeaderView</span> <span class="nl">setState:</span><span class="n">EGOOPullRefreshNormal</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">refreshHeaderView</span> <span class="n">setCurrentDate</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of those contentInsets tend to break things quite nastily on iOS7. I&rsquo;ve now switched to a UIRefreshControl for
my table views and all is well in the world</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">refreshControl</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIRefreshControl</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">refreshControl</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">reloadData</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventValueChanged</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">reloadData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">refreshControl</span> <span class="n">beginRefreshing</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//Do the reload</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">refreshControl</span> <span class="n">endRefreshing</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, all of the other cruft washes away and gets you my favorite kinds of commits &ldquo;6 lines added, 50 lines removed&rdquo;!</p>

<h3>Table Cell Backgrounds</h3>

<p>I rely a lot on my table backgrounds to provide my color for my table views. I usually don&rsquo;t have much design
in each table cell. So, you can imagine my surprise when after compiling for iOS7, I see something like this:<br/>
<img src="http://AppsVersusRobots.github.io/images/posts/iOS7-white.png" width="320" height="568"> <br/>
AHHH! So much white!!! Luckily, I have most of my custom table cells done as classes, so in the initialization of the class,
I simply have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">clearColor</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Swipe Navigation</h3>

<p>I actually really like the &ldquo;swipe to go back&rdquo; navigation methods in iOS7, but for those who don&rsquo;t or if you find a place where
it might not be proper, you can disable it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Navigation Bar Coloring</h3>

<p>There are now two different nav bar tinting properties:</p>

<ul>
<li>   tintColor = color of the back button, button titles and images</li>
<li>   barTintColor = changes the color of the bar itself</li>
</ul>


<h3>That&rsquo;s All, For Now</h3>

<p>I&rsquo;m sure I&rsquo;ll have plenty more to fill in on, but these were the first of my iOS 7 findings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating Network Latency]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2013/08/06/simulating-network-latency/"/>
    <updated>2013-08-06T22:51:00-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2013/08/06/simulating-network-latency</id>
    <content type="html"><![CDATA[<p>Whenever I&rsquo;m in need of a good old fashioned loading screen, and I&rsquo;m not in the mood for
really doing network communications, I will use this handy GCD trick.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSInteger</span> <span class="n">delayTime</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">delayTime</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">),</span> <span class="n">dispatch_get_current_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>     <span class="p">[</span><span class="n">self</span> <span class="n">updateViewWithData</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It isn&rsquo;t the prettiest solution, but sometimes you just want to get the feeling the user will
be feeling while on a crappy network somewhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://AppsVersusRobots.github.io/blog/2013/08/06/hello-world/"/>
    <updated>2013-08-06T22:32:00-04:00</updated>
    <id>http://AppsVersusRobots.github.io/blog/2013/08/06/hello-world</id>
    <content type="html"><![CDATA[<p>This is a new post about things. Yea.</p>
]]></content>
  </entry>
  
</feed>
